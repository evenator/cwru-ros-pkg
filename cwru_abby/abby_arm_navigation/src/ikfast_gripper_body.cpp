/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 61 generated on 2013-03-13 09:33:48.764106
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==61);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#define IKFAST_STRINGIZE2(s) #s
#define IKFAST_STRINGIZE(s) IKFAST_STRINGIZE2(s)

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)0.000001)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKcos(j[2]);
x3=IKsin(j[1]);
x4=IKsin(j[2]);
x5=IKsin(j[0]);
x6=IKsin(j[3]);
x7=IKcos(j[3]);
x8=IKsin(j[5]);
x9=IKsin(j[4]);
x10=IKcos(j[4]);
x11=IKcos(j[5]);
x12=((IkReal(0.0700000000000000))*(x5));
x13=((IkReal(0.302000000000000))*(x4));
x14=((IkReal(1.00000000000000))*(x2));
x15=((IkReal(0.0720000000000000))*(x7));
x16=((IkReal(0.0720000000000000))*(x4));
x17=((IkReal(1.00000000000000))*(x4));
x18=((IkReal(1.00000000000000))*(x9));
x19=((IkReal(1.00000000000000))*(x6));
x20=((IkReal(1.00000000000000))*(x10));
x21=((IkReal(1.00000000000000))*(x7));
x22=((IkReal(0.302000000000000))*(x2));
x23=((IkReal(0.0700000000000000))*(x2));
x24=((x1)*(x4));
x25=((x5)*(x6));
x26=((x0)*(x3));
x27=((x0)*(x1));
x28=((x3)*(x5));
x29=((x2)*(x3));
x30=((x7)*(x9));
x31=((x1)*(x5));
x32=((x19)*(x5));
x33=((x17)*(x3));
x34=((x1)*(x14));
x35=((IkReal(0.0720000000000000))*(x1)*(x2));
x36=((x17)*(x28));
x37=((x14)*(x31));
x38=((((IkReal(-1.00000000000000))*(x33)))+(x34));
x39=((((IkReal(-1.00000000000000))*(x1)*(x17)))+(((IkReal(-1.00000000000000))*(x14)*(x3))));
x40=((x38)*(x6));
x41=((x39)*(x9));
x42=((((IkReal(-1.00000000000000))*(x17)*(x26)))+(((x14)*(x27))));
x43=((x37)+(((IkReal(-1.00000000000000))*(x36))));
x44=((x10)*(x38)*(x7));
x45=((((x17)*(x27)))+(((x14)*(x26))));
x46=((IkReal(-1.00000000000000))*(x45));
x47=((((x14)*(x28)))+(((x17)*(x31))));
x48=((IkReal(-1.00000000000000))*(x47));
x49=((x46)*(x7));
x50=((((x45)*(x6)))+(((IkReal(-1.00000000000000))*(x21)*(x5))));
x51=((x32)+(((IkReal(-1.00000000000000))*(x21)*(x46))));
x52=((((IkReal(-1.00000000000000))*(x21)*(x48)))+(((IkReal(-1.00000000000000))*(x0)*(x19))));
x53=((((IkReal(-1.00000000000000))*(x0)*(x21)))+(((IkReal(-1.00000000000000))*(x19)*(x47))));
x54=((x10)*(x51));
x55=((x10)*(x52));
eerot[0]=((((x11)*(((((IkReal(-1.00000000000000))*(x20)*(x51)))+(((IkReal(-1.00000000000000))*(x18)*(x42)))))))+(((x50)*(x8))));
eerot[1]=((((x8)*(((x54)+(((x42)*(x9)))))))+(((x11)*(x50))));
eerot[2]=((((x10)*(x42)))+(((x9)*(((x49)+(((IkReal(-1.00000000000000))*(x32))))))));
IkReal x56=((IkReal(1.00000000000000))*(x26));
eetrans[0]=((((x22)*(x27)))+(((x9)*(((((IkReal(-0.0720000000000000))*(x25)))+(((x15)*(x46)))))))+(((IkReal(0.0700000000000000))*(x0)*(x24)))+(((IkReal(-1.00000000000000))*(x13)*(x56)))+(((IkReal(0.270000000000000))*(x26)))+(((x23)*(x26)))+(((x10)*(((((IkReal(0.0720000000000000))*(x2)*(x27)))+(((IkReal(-1.00000000000000))*(x16)*(x56))))))));
eerot[3]=((((x11)*(((((IkReal(-1.00000000000000))*(x44)))+(((IkReal(-1.00000000000000))*(x41)))))))+(((x40)*(x8))));
eerot[4]=((((x11)*(x40)))+(((x8)*(((x44)+(x41))))));
eerot[5]=((((x10)*(x39)))+(((x30)*(((x33)+(((IkReal(-1.00000000000000))*(x34))))))));
IkReal x57=((IkReal(1.00000000000000))*(x1));
eetrans[1]=((IkReal(0.290000000000000))+(((IkReal(-1.00000000000000))*(x22)*(x3)))+(((IkReal(0.270000000000000))*(x1)))+(((x30)*(((((x16)*(x3)))+(((IkReal(-1.00000000000000))*(x35)))))))+(((IkReal(-0.0700000000000000))*(x3)*(x4)))+(((x1)*(x23)))+(((x10)*(((((IkReal(-0.0720000000000000))*(x29)))+(((IkReal(-1.00000000000000))*(x16)*(x57)))))))+(((IkReal(-1.00000000000000))*(x13)*(x57))));
eerot[6]=((((x53)*(x8)))+(((x11)*(((x55)+(((x43)*(x9))))))));
eerot[7]=((((x8)*(((((IkReal(-1.00000000000000))*(x20)*(x52)))+(((IkReal(-1.00000000000000))*(x18)*(x43)))))))+(((x11)*(x53))));
eerot[8]=((((x10)*(((x36)+(((IkReal(-1.00000000000000))*(x37)))))))+(((x52)*(x9))));
IkReal x58=((IkReal(1.00000000000000))*(x12));
eetrans[2]=((((x9)*(((((IkReal(-1.00000000000000))*(x15)*(x48)))+(((IkReal(-0.0720000000000000))*(x0)*(x6)))))))+(((x10)*(((((x16)*(x28)))+(((IkReal(-0.0720000000000000))*(x2)*(x31)))))))+(((IkReal(-1.00000000000000))*(x24)*(x58)))+(((IkReal(-1.00000000000000))*(x22)*(x31)))+(((IkReal(-0.270000000000000))*(x28)))+(((IkReal(-1.00000000000000))*(x29)*(x58)))+(((x13)*(x28))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j6,cj6,sj6,htj6,j7,cj7,sj7,htj7,j8,cj8,sj8,htj8,j9,cj9,sj9,htj9,j10,cj10,sj10,htj10,j11,cj11,sj11,htj11,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij6[2], _nj6,_ij7[2], _nj7,_ij8[2], _nj8,_ij9[2], _nj9,_ij10[2], _nj10,_ij11[2], _nj11;

bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j6=numeric_limits<IkReal>::quiet_NaN(); _ij6[0] = -1; _ij6[1] = -1; _nj6 = -1; j7=numeric_limits<IkReal>::quiet_NaN(); _ij7[0] = -1; _ij7[1] = -1; _nj7 = -1; j8=numeric_limits<IkReal>::quiet_NaN(); _ij8[0] = -1; _ij8[1] = -1; _nj8 = -1; j9=numeric_limits<IkReal>::quiet_NaN(); _ij9[0] = -1; _ij9[1] = -1; _nj9 = -1; j10=numeric_limits<IkReal>::quiet_NaN(); _ij10[0] = -1; _ij10[1] = -1; _nj10 = -1; j11=numeric_limits<IkReal>::quiet_NaN(); _ij11[0] = -1; _ij11[1] = -1; _nj11 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r01;
new_r01=((IkReal(-1.00000000000000))*(r00));
new_r02=r02;
new_px=((px)+(((IkReal(-0.0720000000000000))*(r02))));
new_r10=((IkReal(-1.00000000000000))*(r21));
new_r11=r20;
new_r12=((IkReal(-1.00000000000000))*(r22));
new_py=((((IkReal(0.0720000000000000))*(r22)))+(((IkReal(-1.00000000000000))*(pz))));
new_r20=r11;
new_r21=((IkReal(-1.00000000000000))*(r10));
new_r22=r12;
new_pz=((IkReal(-0.290000000000000))+(py)+(((IkReal(-0.0720000000000000))*(r12))));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
pp=(((px)*(px))+((pz)*(pz))+((py)*(py)));
npx=((((py)*(r10)))+(((pz)*(r20)))+(((px)*(r00))));
npy=((((px)*(r01)))+(((pz)*(r21)))+(((py)*(r11))));
npz=((((py)*(r12)))+(((pz)*(r22)))+(((px)*(r02))));
rxp0_0=((((IkReal(-1.00000000000000))*(py)*(r20)))+(((pz)*(r10))));
rxp0_1=((((px)*(r20)))+(((IkReal(-1.00000000000000))*(pz)*(r00))));
rxp0_2=((((py)*(r00)))+(((IkReal(-1.00000000000000))*(px)*(r10))));
rxp1_0=((((pz)*(r11)))+(((IkReal(-1.00000000000000))*(py)*(r21))));
rxp1_1=((((IkReal(-1.00000000000000))*(pz)*(r01)))+(((px)*(r21))));
rxp1_2=((((py)*(r01)))+(((IkReal(-1.00000000000000))*(px)*(r11))));
rxp2_0=((((IkReal(-1.00000000000000))*(py)*(r22)))+(((pz)*(r12))));
rxp2_1=((((px)*(r22)))+(((IkReal(-1.00000000000000))*(pz)*(r02))));
rxp2_2=((((py)*(r02)))+(((IkReal(-1.00000000000000))*(px)*(r12))));
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
if( IKabs(((IkReal(-1.00000000000000))*(py))) < IKFAST_ATAN2_MAGTHRESH && IKabs(px) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x59=IKatan2(((IkReal(-1.00000000000000))*(py)), px);
j6array[0]=((IkReal(-1.00000000000000))*(x59));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x59))));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
IkReal x60=(py)*(py);
IkReal x61=(cj6)*(cj6);
IkReal x62=(px)*(px);
IkReal x63=((IkReal(8.31762278010237e-6))*(x61));
if( (((IkReal(-1.00956092599315))+(((IkReal(5.97359549092239))*(x62)))+(((IkReal(-1.00000000000000))*(x62)*(x63)))+(((x60)*(x63)))+(((IkReal(-1.66352455602047e-5))*(cj6)*(px)*(py)*(sj6)))+(((IkReal(5.97358717329961))*(x60)))+(((IkReal(5.97358717329961))*((pz)*(pz)))))) < -1-IKFAST_SINCOS_THRESH || (((IkReal(-1.00956092599315))+(((IkReal(5.97359549092239))*(x62)))+(((IkReal(-1.00000000000000))*(x62)*(x63)))+(((x60)*(x63)))+(((IkReal(-1.66352455602047e-5))*(cj6)*(px)*(py)*(sj6)))+(((IkReal(5.97358717329961))*(x60)))+(((IkReal(5.97358717329961))*((pz)*(pz)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x64=IKasin(((IkReal(-1.00956092599315))+(((IkReal(5.97359549092239))*(x62)))+(((IkReal(-1.00000000000000))*(x62)*(x63)))+(((x60)*(x63)))+(((IkReal(-1.66352455602047e-5))*(cj6)*(px)*(py)*(sj6)))+(((IkReal(5.97358717329961))*(x60)))+(((IkReal(5.97358717329961))*((pz)*(pz))))));
j8array[0]=((IkReal(-2.91500668730136))+(((IkReal(1.00000000000000))*(x64))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
j8array[1]=((IkReal(0.226585966288437))+(((IkReal(-1.00000000000000))*(x64))));
sj8array[1]=IKsin(j8array[1]);
cj8array[1]=IKcos(j8array[1]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
if( j8array[1] > IKPI )
{
    j8array[1]-=IK2PI;
}
else if( j8array[1] < -IKPI )
{    j8array[1]+=IK2PI;
}
j8valid[1] = true;
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];

{
IkReal dummyeval[1];
IkReal gconst0;
gconst0=IKsign(((((IkReal(54.0000000000000))*(cj6)*(px)*(py)*(sj6)))+(((IkReal(27.0000000000000))*((cj6)*(cj6))*((px)*(px))))+(((IkReal(27.0000000000000))*((py)*(py))*((sj6)*(sj6))))+(((IkReal(27.0000000000000))*((pz)*(pz))))));
dummyeval[0]=(((((py)*(py))*((sj6)*(sj6))))+(((IkReal(2.00000000000000))*(cj6)*(px)*(py)*(sj6)))+((pz)*(pz))+((((cj6)*(cj6))*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst1;
gconst1=IKsign((((((py)*(py))*((sj6)*(sj6))))+(((IkReal(2.00000000000000))*(cj6)*(px)*(py)*(sj6)))+((pz)*(pz))+((((cj6)*(cj6))*((px)*(px))))));
dummyeval[0]=(((((py)*(py))*((sj6)*(sj6))))+(((IkReal(2.00000000000000))*(cj6)*(px)*(py)*(sj6)))+((pz)*(pz))+((((cj6)*(cj6))*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x65=((cj6)*(px));
IkReal x66=((IkReal(0.302000000000000))*(sj8));
IkReal x67=((IkReal(0.0700000000000000))*(cj8));
IkReal x68=((IkReal(0.0700000000000000))*(sj8));
IkReal x69=((py)*(sj6));
IkReal x70=((IkReal(0.302000000000000))*(cj8));
IkReal x71=((cj8)*(x69));
if( IKabs(((gconst1)*(((((IkReal(0.270000000000000))*(x65)))+(((IkReal(-1.00000000000000))*(pz)*(x70)))+(((x65)*(x67)))+(((IkReal(-1.00000000000000))*(x66)*(x69)))+(((IkReal(-1.00000000000000))*(x65)*(x66)))+(((IkReal(0.270000000000000))*(x69)))+(((x67)*(x69)))+(((IkReal(-1.00000000000000))*(pz)*(x68))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst1)*(((((x65)*(x70)))+(((x69)*(x70)))+(((pz)*(x67)))+(((x68)*(x69)))+(((x65)*(x68)))+(((IkReal(0.270000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pz)*(x66))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst1)*(((((IkReal(0.270000000000000))*(x65)))+(((IkReal(-1.00000000000000))*(pz)*(x70)))+(((x65)*(x67)))+(((IkReal(-1.00000000000000))*(x66)*(x69)))+(((IkReal(-1.00000000000000))*(x65)*(x66)))+(((IkReal(0.270000000000000))*(x69)))+(((x67)*(x69)))+(((IkReal(-1.00000000000000))*(pz)*(x68)))))), ((gconst1)*(((((x65)*(x70)))+(((x69)*(x70)))+(((pz)*(x67)))+(((x68)*(x69)))+(((x65)*(x68)))+(((IkReal(0.270000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pz)*(x66)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[5];
IkReal x72=IKsin(j7);
IkReal x73=IKcos(j7);
IkReal x74=((cj6)*(px));
IkReal x75=((py)*(sj6));
IkReal x76=((IkReal(1.00000000000000))*(x72));
IkReal x77=((cj8)*(x73));
IkReal x78=((IkReal(0.302082389690313))*(x72));
IkReal x79=((IkReal(0.540000000000000))*(x72));
IkReal x80=((sj8)*(x73));
IkReal x81=((IkReal(0.0696435915141485))*(x72));
IkReal x82=((pz)*(x73));
evalcond[0]=((IkReal(0.0232040000000000))+(((x74)*(x79)))+(((IkReal(-1.00000000000000))*(pp)))+(((x75)*(x79)))+(((IkReal(0.540000000000000))*(x82))));
evalcond[1]=((((IkReal(-0.302000000000000))*(cj8)))+(((IkReal(-0.0700000000000000))*(sj8)))+(((x73)*(x75)))+(((IkReal(-1.00000000000000))*(pz)*(x76)))+(((x73)*(x74))));
evalcond[2]=((IkReal(0.270000000000000))+(((IkReal(-1.00000000000000))*(x82)))+(((IkReal(-1.00000000000000))*(x74)*(x76)))+(((IkReal(-1.00000000000000))*(x75)*(x76)))+(((IkReal(-0.302000000000000))*(sj8)))+(((IkReal(0.0700000000000000))*(cj8))));
evalcond[3]=((((IkReal(-0.269999812026196))*(x73)))+(((IkReal(0.999999303800727))*(pz)))+(((IkReal(-0.0696435915141485))*(x77)))+(((IkReal(0.302082389690313))*(x80)))+(((sj8)*(x81)))+(((cj8)*(x78))));
evalcond[4]=((((IkReal(0.302082389690313))*(x77)))+(((cj8)*(x81)))+(((IkReal(-0.999999303800727))*(x74)))+(((IkReal(-0.999999303800727))*(x75)))+(((IkReal(0.0696435915141485))*(x80)))+(((IkReal(-1.00000000000000))*(sj8)*(x78)))+(((IkReal(0.269999812026196))*(x72))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x234=((py)*(sj6));
IkReal x235=((IkReal(8.15400000000000))*(cj8));
IkReal x236=((IkReal(1.89000000000000))*(sj8));
IkReal x237=((cj6)*(px));
IkReal x238=((IkReal(50.0000000000000))*(pp));
if( IKabs(((gconst0)*(((((IkReal(-1.00000000000000))*(pz)*(x235)))+(((IkReal(-1.16020000000000))*(x237)))+(((IkReal(-1.16020000000000))*(x234)))+(((x234)*(x238)))+(((x237)*(x238)))+(((IkReal(-1.00000000000000))*(pz)*(x236))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst0)*(((((x234)*(x236)))+(((pz)*(x238)))+(((IkReal(-1.16020000000000))*(pz)))+(((x236)*(x237)))+(((x234)*(x235)))+(((x235)*(x237))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j7array[0]=IKatan2(((gconst0)*(((((IkReal(-1.00000000000000))*(pz)*(x235)))+(((IkReal(-1.16020000000000))*(x237)))+(((IkReal(-1.16020000000000))*(x234)))+(((x234)*(x238)))+(((x237)*(x238)))+(((IkReal(-1.00000000000000))*(pz)*(x236)))))), ((gconst0)*(((((x234)*(x236)))+(((pz)*(x238)))+(((IkReal(-1.16020000000000))*(pz)))+(((x236)*(x237)))+(((x234)*(x235)))+(((x235)*(x237)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[5];
IkReal x239=IKsin(j7);
IkReal x240=IKcos(j7);
IkReal x241=((cj6)*(px));
IkReal x242=((py)*(sj6));
IkReal x243=((IkReal(1.00000000000000))*(x239));
IkReal x244=((cj8)*(x240));
IkReal x245=((IkReal(0.302082389690313))*(x239));
IkReal x246=((IkReal(0.540000000000000))*(x239));
IkReal x247=((sj8)*(x240));
IkReal x248=((IkReal(0.0696435915141485))*(x239));
IkReal x249=((pz)*(x240));
evalcond[0]=((IkReal(0.0232040000000000))+(((x241)*(x246)))+(((IkReal(0.540000000000000))*(x249)))+(((x242)*(x246)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[1]=((((IkReal(-0.302000000000000))*(cj8)))+(((IkReal(-1.00000000000000))*(pz)*(x243)))+(((IkReal(-0.0700000000000000))*(sj8)))+(((x240)*(x242)))+(((x240)*(x241))));
evalcond[2]=((IkReal(0.270000000000000))+(((IkReal(-1.00000000000000))*(x242)*(x243)))+(((IkReal(-1.00000000000000))*(x241)*(x243)))+(((IkReal(-1.00000000000000))*(x249)))+(((IkReal(-0.302000000000000))*(sj8)))+(((IkReal(0.0700000000000000))*(cj8))));
evalcond[3]=((((IkReal(-0.269999812026196))*(x240)))+(((IkReal(0.302082389690313))*(x247)))+(((IkReal(0.999999303800727))*(pz)))+(((cj8)*(x245)))+(((IkReal(-0.0696435915141485))*(x244)))+(((sj8)*(x248))));
evalcond[4]=((((IkReal(0.0696435915141485))*(x247)))+(((IkReal(0.269999812026196))*(x239)))+(((IkReal(0.302082389690313))*(x244)))+(((cj8)*(x248)))+(((IkReal(-1.00000000000000))*(sj8)*(x245)))+(((IkReal(-0.999999303800727))*(x241)))+(((IkReal(-0.999999303800727))*(x242))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}
}
}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x83=((IkReal(0.999999303800727))*(cj8));
IkReal x84=((IkReal(0.00117999917848486))*(sj8));
IkReal x85=((r12)*(sj6));
IkReal x86=((cj6)*(r01));
IkReal x87=((IkReal(0.999999303800727))*(cj7));
IkReal x88=((IkReal(1.00000000000000))*(sj6));
IkReal x89=((r10)*(sj6));
IkReal x90=((IkReal(0.00117999917848486))*(sj7));
IkReal x91=((IkReal(0.999999303800727))*(sj7));
IkReal x92=((IkReal(0.00117999917848486))*(cj7));
IkReal x93=((r11)*(sj6));
IkReal x94=((cj6)*(r02));
IkReal x95=((cj6)*(r00));
IkReal x96=((((IkReal(-1.00000000000000))*(x83)))+(x84));
IkReal x97=((((IkReal(-1.00000000000000))*(x84)))+(x83));
IkReal x98=((IkReal(-0.999999303800727))*(sj7));
IkReal x99=((((IkReal(0.999999303800727))*(sj8)))+(((IkReal(0.00117999917848486))*(cj8))));
IkReal x100=((sj7)*(x97));
IkReal x101=((cj7)*(x96));
IkReal x102=((x92)*(x96));
IkReal x103=((x90)*(x99));
IkReal x104=((x87)*(x99));
IkReal x105=((x92)*(x99));
IkReal x106=((x98)*(x99));
IkReal x107=((x104)+(x103));
IkReal x108=((x105)+(x106));
IkReal x109=((((IkReal(-1.00000000000000))*(x91)*(x96)))+(x107)+(x102));
IkReal x110=((((IkReal(-1.00000000000000))*(x91)*(x99)))+(((IkReal(-1.00000000000000))*(x90)*(x96)))+(((IkReal(-1.00000000000000))*(x87)*(x96)))+(x105));
IkReal x111=((((x92)*(x97)))+(((IkReal(-1.00000000000000))*(x91)*(x97)))+(((IkReal(-1.00000000000000))*(x107))));
IkReal x112=((((x96)*(x98)))+(x107)+(x102));
IkReal x113=((((x90)*(x97)))+(((x87)*(x97)))+(x108));
new_r00=((((IkReal(-1.00000000000000))*(r00)*(x88)))+(((cj6)*(r10))));
new_r01=((((cj6)*(r11)))+(((IkReal(-1.00000000000000))*(r01)*(x88))));
new_r02=((((cj6)*(r12)))+(((IkReal(-1.00000000000000))*(r02)*(x88))));
new_r10=((((x112)*(x95)))+(((x112)*(x89)))+(((r20)*(x110))));
new_r11=((((r21)*(((((IkReal(-0.00117999917848486))*(sj7)*(x96)))+(x108)+(((IkReal(-0.999999303800727))*(x101)))))))+(((x109)*(x93)))+(((x109)*(x86))));
new_r12=((((r22)*(x110)))+(((x112)*(x94)))+(((x112)*(x85))));
new_r20=((((x113)*(x89)))+(((r20)*(x111)))+(((x113)*(x95))));
new_r21=((((x113)*(x93)))+(((x113)*(x86)))+(((r21)*(x111))));
new_r22=((((x113)*(x85)))+(((r22)*(x111)))+(((x113)*(x94))));
{
IkReal j10array[2], cj10array[2], sj10array[2];
bool j10valid[2]={false};
_nj10 = 2;
cj10array[0]=new_r22;
if( cj10array[0] >= -1-IKFAST_SINCOS_THRESH && cj10array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j10valid[0] = j10valid[1] = true;
    j10array[0] = IKacos(cj10array[0]);
    sj10array[0] = IKsin(j10array[0]);
    cj10array[1] = cj10array[0];
    j10array[1] = -j10array[0];
    sj10array[1] = -sj10array[0];
}
else if( isnan(cj10array[0]) )
{
    // probably any value will work
    j10valid[0] = true;
    cj10array[0] = 1; sj10array[0] = 0; j10array[0] = 0;
}
for(int ij10 = 0; ij10 < 2; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 2; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];

{
IkReal dummyeval[1];
IkReal gconst4;
gconst4=IKsign(sj10);
dummyeval[0]=sj10;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst2;
gconst2=IKsign((((new_r12)*(new_r12))+((new_r02)*(new_r02))));
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst3;
gconst3=IKsign(((((new_r10)*(new_r12)*(sj10)))+(((new_r00)*(new_r02)*(sj10)))));
dummyeval[0]=((((new_r10)*(new_r12)*(sj10)))+(((new_r00)*(new_r02)*(sj10))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
IkReal x114=((IkReal(-1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j10)), IkReal(6.28318530717959))));
evalcond[1]=x114;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
evalcond[6]=x114;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j9array[2], cj9array[2], sj9array[2];
bool j9valid[2]={false};
_nj9 = 2;
if( IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x115=IKatan2(new_r02, new_r12);
j9array[0]=((IkReal(-1.00000000000000))*(x115));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
j9array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x115))));
sj9array[1]=IKsin(j9array[1]);
cj9array[1]=IKcos(j9array[1]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
if( j9array[1] > IKPI )
{
    j9array[1]-=IK2PI;
}
else if( j9array[1] < -IKPI )
{    j9array[1]+=IK2PI;
}
j9valid[1] = true;
for(int ij9 = 0; ij9 < 2; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 2; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[1];
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(IKsin(j9))))+(((new_r12)*(IKcos(j9)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(cj9)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj9))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r10)*(sj9)))+(((cj9)*(new_r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj9)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj9)))))+IKsqr(((((new_r10)*(sj9)))+(((cj9)*(new_r00)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj9)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj9)))), ((((new_r10)*(sj9)))+(((cj9)*(new_r00)))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[4];
IkReal x116=IKsin(j11);
IkReal x117=((IkReal(1.00000000000000))*(sj9));
IkReal x118=((IkReal(1.00000000000000))*(IKcos(j11)));
evalcond[0]=((((cj9)*(new_r01)))+(x116)+(((new_r11)*(sj9))));
evalcond[1]=((((new_r10)*(sj9)))+(((IkReal(-1.00000000000000))*(x118)))+(((cj9)*(new_r00))));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r00)*(x117)))+(((IkReal(-1.00000000000000))*(x116)))+(((cj9)*(new_r10))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x118)))+(((cj9)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(x117))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j10)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(1.00000000000000))+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[5]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[6]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j9array[2], cj9array[2], sj9array[2];
bool j9valid[2]={false};
_nj9 = 2;
if( IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x119=IKatan2(new_r02, new_r12);
j9array[0]=((IkReal(-1.00000000000000))*(x119));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
j9array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x119))));
sj9array[1]=IKsin(j9array[1]);
cj9array[1]=IKcos(j9array[1]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
if( j9array[1] > IKPI )
{
    j9array[1]-=IK2PI;
}
else if( j9array[1] < -IKPI )
{    j9array[1]+=IK2PI;
}
j9valid[1] = true;
for(int ij9 = 0; ij9 < 2; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 2; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[1];
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(IKsin(j9))))+(((new_r12)*(IKcos(j9)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(cj9)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj9))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r10)*(sj9)))+(((cj9)*(new_r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj9)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj9)))))+IKsqr(((((new_r10)*(sj9)))+(((cj9)*(new_r00)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj9)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj9)))), ((((new_r10)*(sj9)))+(((cj9)*(new_r00)))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[4];
IkReal x120=IKsin(j11);
IkReal x121=IKcos(j11);
IkReal x122=((IkReal(1.00000000000000))*(sj9));
evalcond[0]=((x120)+(((cj9)*(new_r01)))+(((new_r11)*(sj9))));
evalcond[1]=((((new_r10)*(sj9)))+(((cj9)*(new_r00)))+(((IkReal(-1.00000000000000))*(x121))));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r00)*(x122)))+(x120)+(((cj9)*(new_r10))));
evalcond[3]=((((cj9)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(x122)))+(x121));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x123=((cj10)*(gconst3)*(new_r20));
if( IKabs(((IkReal(-1.00000000000000))*(new_r02)*(x123))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r12)*(x123))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j9array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r02)*(x123)), ((new_r12)*(x123)));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[6];
IkReal x124=IKcos(j9);
IkReal x125=IKsin(j9);
IkReal x126=((IkReal(1.00000000000000))*(sj10));
IkReal x127=((new_r02)*(x125));
IkReal x128=((new_r12)*(x124));
IkReal x129=((sj10)*(x125));
evalcond[0]=((((new_r12)*(x125)))+(((new_r02)*(x124))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x127)))+(x128)+(sj10));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r10)*(x124)*(x126)))+(((cj10)*(new_r20)))+(((new_r00)*(x129))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r11)*(x124)*(x126)))+(((cj10)*(new_r21)))+(((new_r01)*(x129))));
evalcond[4]=((IkReal(-1.00000000000000))+(((cj10)*(new_r22)))+(((IkReal(-1.00000000000000))*(x126)*(x128)))+(((sj10)*(x127))));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj10)*(x128)))+(((cj10)*(x127)))+(((IkReal(-1.00000000000000))*(new_r22)*(x126))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst5;
gconst5=IKsign(sj10);
dummyeval[0]=sj10;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj10;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj10;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
IkReal x130=((IkReal(-1.00000000000000))+(new_r22));
IkReal x131=((new_r02)*(sj9));
IkReal x132=((cj9)*(new_r12));
IkReal x133=((((cj9)*(new_r02)))+(((new_r12)*(sj9))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j10)), IkReal(6.28318530717959))));
evalcond[1]=x130;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x133;
evalcond[5]=x133;
evalcond[6]=((x132)+(((IkReal(-1.00000000000000))*(x131))));
evalcond[7]=new_r20;
evalcond[8]=new_r21;
evalcond[9]=x130;
evalcond[10]=((((IkReal(-1.00000000000000))*(x132)))+(x131));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(cj9)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj9))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r10)*(sj9)))+(((cj9)*(new_r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj9)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj9)))))+IKsqr(((((new_r10)*(sj9)))+(((cj9)*(new_r00)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj9)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj9)))), ((((new_r10)*(sj9)))+(((cj9)*(new_r00)))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[4];
IkReal x134=IKsin(j11);
IkReal x135=((IkReal(1.00000000000000))*(sj9));
IkReal x136=((IkReal(1.00000000000000))*(IKcos(j11)));
evalcond[0]=((((cj9)*(new_r01)))+(x134)+(((new_r11)*(sj9))));
evalcond[1]=((((new_r10)*(sj9)))+(((IkReal(-1.00000000000000))*(x136)))+(((cj9)*(new_r00))));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r00)*(x135)))+(((IkReal(-1.00000000000000))*(x134)))+(((cj9)*(new_r10))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x136)))+(((cj9)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(x135))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x137=((((cj9)*(new_r02)))+(((new_r12)*(sj9))));
IkReal x138=((((IkReal(-1.00000000000000))*(new_r02)*(sj9)))+(((cj9)*(new_r12))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j10)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(1.00000000000000))+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x137;
evalcond[5]=x137;
evalcond[6]=x138;
evalcond[7]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[8]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[9]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
evalcond[10]=x138;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(cj9)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj9))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r10)*(sj9)))+(((cj9)*(new_r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj9)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj9)))))+IKsqr(((((new_r10)*(sj9)))+(((cj9)*(new_r00)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj9)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj9)))), ((((new_r10)*(sj9)))+(((cj9)*(new_r00)))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[4];
IkReal x139=IKsin(j11);
IkReal x140=IKcos(j11);
IkReal x141=((IkReal(1.00000000000000))*(sj9));
evalcond[0]=((((cj9)*(new_r01)))+(x139)+(((new_r11)*(sj9))));
evalcond[1]=((((new_r10)*(sj9)))+(((IkReal(-1.00000000000000))*(x140)))+(((cj9)*(new_r00))));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r00)*(x141)))+(x139)+(((cj9)*(new_r10))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x141)))+(((cj9)*(new_r11)))+(x140));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(cj9)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj9))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r21)*(((IKabs(sj10) != 0)?((IkReal)1/(sj10)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj9)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj9)))))+IKsqr(((new_r21)*(((IKabs(sj10) != 0)?((IkReal)1/(sj10)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj9)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj9)))), ((new_r21)*(((IKabs(sj10) != 0)?((IkReal)1/(sj10)):(IkReal)1.0e30))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[8];
IkReal x142=IKsin(j11);
IkReal x143=IKcos(j11);
IkReal x144=((cj9)*(new_r10));
IkReal x145=((IkReal(1.00000000000000))*(cj10));
IkReal x146=((IkReal(1.00000000000000))*(sj9));
IkReal x147=((cj9)*(new_r11));
IkReal x148=((cj10)*(sj9));
IkReal x149=((IkReal(1.00000000000000))*(sj10));
IkReal x150=((IkReal(1.00000000000000))*(x143));
evalcond[0]=((new_r20)+(((IkReal(-1.00000000000000))*(x142)*(x149))));
evalcond[1]=((new_r21)+(((IkReal(-1.00000000000000))*(x143)*(x149))));
evalcond[2]=((((cj9)*(new_r01)))+(((new_r11)*(sj9)))+(x142));
evalcond[3]=((((new_r10)*(sj9)))+(((IkReal(-1.00000000000000))*(x150)))+(((cj9)*(new_r00))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x142)*(x145)))+(((IkReal(-1.00000000000000))*(new_r00)*(x146)))+(x144));
evalcond[5]=((((IkReal(-1.00000000000000))*(new_r01)*(x146)))+(x147)+(((IkReal(-1.00000000000000))*(x143)*(x145))));
evalcond[6]=((((IkReal(-1.00000000000000))*(x144)*(x145)))+(((IkReal(-1.00000000000000))*(new_r20)*(x149)))+(((new_r00)*(x148)))+(x142));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r21)*(x149)))+(((IkReal(-1.00000000000000))*(x145)*(x147)))+(((new_r01)*(x148)))+(x143));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
if( IKabs(((new_r20)*(((IKabs(sj10) != 0)?((IkReal)1/(sj10)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r10)*(sj9)))+(((cj9)*(new_r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((new_r20)*(((IKabs(sj10) != 0)?((IkReal)1/(sj10)):(IkReal)1.0e30))))+IKsqr(((((new_r10)*(sj9)))+(((cj9)*(new_r00)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((new_r20)*(((IKabs(sj10) != 0)?((IkReal)1/(sj10)):(IkReal)1.0e30))), ((((new_r10)*(sj9)))+(((cj9)*(new_r00)))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[8];
IkReal x151=IKsin(j11);
IkReal x152=IKcos(j11);
IkReal x153=((cj9)*(new_r10));
IkReal x154=((IkReal(1.00000000000000))*(cj10));
IkReal x155=((IkReal(1.00000000000000))*(sj9));
IkReal x156=((cj9)*(new_r11));
IkReal x157=((cj10)*(sj9));
IkReal x158=((IkReal(1.00000000000000))*(sj10));
IkReal x159=((IkReal(1.00000000000000))*(x152));
evalcond[0]=((new_r20)+(((IkReal(-1.00000000000000))*(x151)*(x158))));
evalcond[1]=((new_r21)+(((IkReal(-1.00000000000000))*(x152)*(x158))));
evalcond[2]=((x151)+(((cj9)*(new_r01)))+(((new_r11)*(sj9))));
evalcond[3]=((((new_r10)*(sj9)))+(((IkReal(-1.00000000000000))*(x159)))+(((cj9)*(new_r00))));
evalcond[4]=((x153)+(((IkReal(-1.00000000000000))*(x151)*(x154)))+(((IkReal(-1.00000000000000))*(new_r00)*(x155))));
evalcond[5]=((x156)+(((IkReal(-1.00000000000000))*(x152)*(x154)))+(((IkReal(-1.00000000000000))*(new_r01)*(x155))));
evalcond[6]=((x151)+(((new_r00)*(x157)))+(((IkReal(-1.00000000000000))*(x153)*(x154)))+(((IkReal(-1.00000000000000))*(new_r20)*(x158))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x154)*(x156)))+(x152)+(((new_r01)*(x157)))+(((IkReal(-1.00000000000000))*(new_r21)*(x158))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
if( IKabs(((gconst5)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst5)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j11array[0]=IKatan2(((gconst5)*(new_r20)), ((gconst5)*(new_r21)));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[8];
IkReal x160=IKsin(j11);
IkReal x161=IKcos(j11);
IkReal x162=((cj9)*(new_r10));
IkReal x163=((IkReal(1.00000000000000))*(cj10));
IkReal x164=((IkReal(1.00000000000000))*(sj9));
IkReal x165=((cj9)*(new_r11));
IkReal x166=((cj10)*(sj9));
IkReal x167=((IkReal(1.00000000000000))*(sj10));
IkReal x168=((IkReal(1.00000000000000))*(x161));
evalcond[0]=((new_r20)+(((IkReal(-1.00000000000000))*(x160)*(x167))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x161)*(x167)))+(new_r21));
evalcond[2]=((x160)+(((cj9)*(new_r01)))+(((new_r11)*(sj9))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x168)))+(((new_r10)*(sj9)))+(((cj9)*(new_r00))));
evalcond[4]=((((IkReal(-1.00000000000000))*(new_r00)*(x164)))+(x162)+(((IkReal(-1.00000000000000))*(x160)*(x163))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x161)*(x163)))+(x165)+(((IkReal(-1.00000000000000))*(new_r01)*(x164))));
evalcond[6]=((((new_r00)*(x166)))+(x160)+(((IkReal(-1.00000000000000))*(new_r20)*(x167)))+(((IkReal(-1.00000000000000))*(x162)*(x163))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r21)*(x167)))+(((new_r01)*(x166)))+(((IkReal(-1.00000000000000))*(x163)*(x165)))+(x161));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x169=((gconst2)*(sj10));
if( IKabs(((new_r02)*(x169))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r12)*(x169))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j9array[0]=IKatan2(((new_r02)*(x169)), ((IkReal(-1.00000000000000))*(new_r12)*(x169)));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[6];
IkReal x170=IKcos(j9);
IkReal x171=IKsin(j9);
IkReal x172=((IkReal(1.00000000000000))*(sj10));
IkReal x173=((new_r02)*(x171));
IkReal x174=((new_r12)*(x170));
IkReal x175=((sj10)*(x171));
evalcond[0]=((((new_r12)*(x171)))+(((new_r02)*(x170))));
evalcond[1]=((x174)+(((IkReal(-1.00000000000000))*(x173)))+(sj10));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r10)*(x170)*(x172)))+(((new_r00)*(x175)))+(((cj10)*(new_r20))));
evalcond[3]=((((new_r01)*(x175)))+(((IkReal(-1.00000000000000))*(new_r11)*(x170)*(x172)))+(((cj10)*(new_r21))));
evalcond[4]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(x172)*(x174)))+(((sj10)*(x173)))+(((cj10)*(new_r22))));
evalcond[5]=((((cj10)*(x173)))+(((IkReal(-1.00000000000000))*(cj10)*(x174)))+(((IkReal(-1.00000000000000))*(new_r22)*(x172))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst5;
gconst5=IKsign(sj10);
dummyeval[0]=sj10;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj10;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj10;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
IkReal x176=((IkReal(-1.00000000000000))+(new_r22));
IkReal x177=((new_r02)*(sj9));
IkReal x178=((cj9)*(new_r12));
IkReal x179=((((cj9)*(new_r02)))+(((new_r12)*(sj9))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j10)), IkReal(6.28318530717959))));
evalcond[1]=x176;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x179;
evalcond[5]=x179;
evalcond[6]=((x178)+(((IkReal(-1.00000000000000))*(x177))));
evalcond[7]=new_r20;
evalcond[8]=new_r21;
evalcond[9]=x176;
evalcond[10]=((x177)+(((IkReal(-1.00000000000000))*(x178))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(cj9)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj9))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r10)*(sj9)))+(((cj9)*(new_r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj9)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj9)))))+IKsqr(((((new_r10)*(sj9)))+(((cj9)*(new_r00)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj9)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj9)))), ((((new_r10)*(sj9)))+(((cj9)*(new_r00)))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[4];
IkReal x180=IKsin(j11);
IkReal x181=((IkReal(1.00000000000000))*(sj9));
IkReal x182=((IkReal(1.00000000000000))*(IKcos(j11)));
evalcond[0]=((x180)+(((cj9)*(new_r01)))+(((new_r11)*(sj9))));
evalcond[1]=((((new_r10)*(sj9)))+(((cj9)*(new_r00)))+(((IkReal(-1.00000000000000))*(x182))));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r00)*(x181)))+(((IkReal(-1.00000000000000))*(x180)))+(((cj9)*(new_r10))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x181)))+(((cj9)*(new_r11)))+(((IkReal(-1.00000000000000))*(x182))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x183=((((cj9)*(new_r02)))+(((new_r12)*(sj9))));
IkReal x184=((((IkReal(-1.00000000000000))*(new_r02)*(sj9)))+(((cj9)*(new_r12))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j10)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(1.00000000000000))+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x183;
evalcond[5]=x183;
evalcond[6]=x184;
evalcond[7]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[8]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[9]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
evalcond[10]=x184;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(cj9)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj9))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r10)*(sj9)))+(((cj9)*(new_r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj9)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj9)))))+IKsqr(((((new_r10)*(sj9)))+(((cj9)*(new_r00)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj9)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj9)))), ((((new_r10)*(sj9)))+(((cj9)*(new_r00)))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[4];
IkReal x185=IKsin(j11);
IkReal x186=IKcos(j11);
IkReal x187=((IkReal(1.00000000000000))*(sj9));
evalcond[0]=((x185)+(((cj9)*(new_r01)))+(((new_r11)*(sj9))));
evalcond[1]=((((new_r10)*(sj9)))+(((IkReal(-1.00000000000000))*(x186)))+(((cj9)*(new_r00))));
evalcond[2]=((x185)+(((IkReal(-1.00000000000000))*(new_r00)*(x187)))+(((cj9)*(new_r10))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x187)))+(((cj9)*(new_r11)))+(x186));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(cj9)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj9))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r21)*(((IKabs(sj10) != 0)?((IkReal)1/(sj10)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj9)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj9)))))+IKsqr(((new_r21)*(((IKabs(sj10) != 0)?((IkReal)1/(sj10)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj9)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj9)))), ((new_r21)*(((IKabs(sj10) != 0)?((IkReal)1/(sj10)):(IkReal)1.0e30))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[8];
IkReal x188=IKsin(j11);
IkReal x189=IKcos(j11);
IkReal x190=((cj9)*(new_r10));
IkReal x191=((IkReal(1.00000000000000))*(cj10));
IkReal x192=((IkReal(1.00000000000000))*(sj9));
IkReal x193=((cj9)*(new_r11));
IkReal x194=((cj10)*(sj9));
IkReal x195=((IkReal(1.00000000000000))*(sj10));
IkReal x196=((IkReal(1.00000000000000))*(x189));
evalcond[0]=((((IkReal(-1.00000000000000))*(x188)*(x195)))+(new_r20));
evalcond[1]=((new_r21)+(((IkReal(-1.00000000000000))*(x189)*(x195))));
evalcond[2]=((x188)+(((cj9)*(new_r01)))+(((new_r11)*(sj9))));
evalcond[3]=((((new_r10)*(sj9)))+(((IkReal(-1.00000000000000))*(x196)))+(((cj9)*(new_r00))));
evalcond[4]=((x190)+(((IkReal(-1.00000000000000))*(x188)*(x191)))+(((IkReal(-1.00000000000000))*(new_r00)*(x192))));
evalcond[5]=((x193)+(((IkReal(-1.00000000000000))*(x189)*(x191)))+(((IkReal(-1.00000000000000))*(new_r01)*(x192))));
evalcond[6]=((((new_r00)*(x194)))+(((IkReal(-1.00000000000000))*(new_r20)*(x195)))+(x188)+(((IkReal(-1.00000000000000))*(x190)*(x191))));
evalcond[7]=((x189)+(((new_r01)*(x194)))+(((IkReal(-1.00000000000000))*(x191)*(x193)))+(((IkReal(-1.00000000000000))*(new_r21)*(x195))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
if( IKabs(((new_r20)*(((IKabs(sj10) != 0)?((IkReal)1/(sj10)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r10)*(sj9)))+(((cj9)*(new_r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((new_r20)*(((IKabs(sj10) != 0)?((IkReal)1/(sj10)):(IkReal)1.0e30))))+IKsqr(((((new_r10)*(sj9)))+(((cj9)*(new_r00)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((new_r20)*(((IKabs(sj10) != 0)?((IkReal)1/(sj10)):(IkReal)1.0e30))), ((((new_r10)*(sj9)))+(((cj9)*(new_r00)))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[8];
IkReal x197=IKsin(j11);
IkReal x198=IKcos(j11);
IkReal x199=((cj9)*(new_r10));
IkReal x200=((IkReal(1.00000000000000))*(cj10));
IkReal x201=((IkReal(1.00000000000000))*(sj9));
IkReal x202=((cj9)*(new_r11));
IkReal x203=((cj10)*(sj9));
IkReal x204=((IkReal(1.00000000000000))*(sj10));
IkReal x205=((IkReal(1.00000000000000))*(x198));
evalcond[0]=((new_r20)+(((IkReal(-1.00000000000000))*(x197)*(x204))));
evalcond[1]=((new_r21)+(((IkReal(-1.00000000000000))*(x198)*(x204))));
evalcond[2]=((x197)+(((cj9)*(new_r01)))+(((new_r11)*(sj9))));
evalcond[3]=((((new_r10)*(sj9)))+(((IkReal(-1.00000000000000))*(x205)))+(((cj9)*(new_r00))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x197)*(x200)))+(((IkReal(-1.00000000000000))*(new_r00)*(x201)))+(x199));
evalcond[5]=((((IkReal(-1.00000000000000))*(x198)*(x200)))+(((IkReal(-1.00000000000000))*(new_r01)*(x201)))+(x202));
evalcond[6]=((((new_r00)*(x203)))+(((IkReal(-1.00000000000000))*(new_r20)*(x204)))+(x197)+(((IkReal(-1.00000000000000))*(x199)*(x200))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x200)*(x202)))+(((IkReal(-1.00000000000000))*(new_r21)*(x204)))+(x198)+(((new_r01)*(x203))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
if( IKabs(((gconst5)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst5)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j11array[0]=IKatan2(((gconst5)*(new_r20)), ((gconst5)*(new_r21)));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[8];
IkReal x206=IKsin(j11);
IkReal x207=IKcos(j11);
IkReal x208=((cj9)*(new_r10));
IkReal x209=((IkReal(1.00000000000000))*(cj10));
IkReal x210=((IkReal(1.00000000000000))*(sj9));
IkReal x211=((cj9)*(new_r11));
IkReal x212=((cj10)*(sj9));
IkReal x213=((IkReal(1.00000000000000))*(sj10));
IkReal x214=((IkReal(1.00000000000000))*(x207));
evalcond[0]=((new_r20)+(((IkReal(-1.00000000000000))*(x206)*(x213))));
evalcond[1]=((new_r21)+(((IkReal(-1.00000000000000))*(x207)*(x213))));
evalcond[2]=((((cj9)*(new_r01)))+(x206)+(((new_r11)*(sj9))));
evalcond[3]=((((new_r10)*(sj9)))+(((IkReal(-1.00000000000000))*(x214)))+(((cj9)*(new_r00))));
evalcond[4]=((x208)+(((IkReal(-1.00000000000000))*(x206)*(x209)))+(((IkReal(-1.00000000000000))*(new_r00)*(x210))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x207)*(x209)))+(x211)+(((IkReal(-1.00000000000000))*(new_r01)*(x210))));
evalcond[6]=((((IkReal(-1.00000000000000))*(x208)*(x209)))+(((new_r00)*(x212)))+(x206)+(((IkReal(-1.00000000000000))*(new_r20)*(x213))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x209)*(x211)))+(x207)+(((new_r01)*(x212)))+(((IkReal(-1.00000000000000))*(new_r21)*(x213))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
if( IKabs(((gconst4)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst4)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j11array[0]=IKatan2(((gconst4)*(new_r20)), ((gconst4)*(new_r21)));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[2];
IkReal x215=((IkReal(1.00000000000000))*(sj10));
evalcond[0]=((new_r20)+(((IkReal(-1.00000000000000))*(x215)*(IKsin(j11)))));
evalcond[1]=((new_r21)+(((IkReal(-1.00000000000000))*(x215)*(IKcos(j11)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst7;
gconst7=IKsign((((new_r12)*(new_r12))+((new_r02)*(new_r02))));
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst6;
gconst6=IKsign(((((IkReal(-1.00000000000000))*(new_r02)*(new_r11)))+(((new_r01)*(new_r12)))));
dummyeval[0]=((((IkReal(-1.00000000000000))*(new_r02)*(new_r11)))+(((new_r01)*(new_r12))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x216=((gconst6)*(sj11));
if( IKabs(((new_r02)*(x216))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r12)*(x216))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j9array[0]=IKatan2(((new_r02)*(x216)), ((IkReal(-1.00000000000000))*(new_r12)*(x216)));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[12];
IkReal x217=IKsin(j9);
IkReal x218=IKcos(j9);
IkReal x219=((IkReal(1.00000000000000))*(sj10));
IkReal x220=((IkReal(1.00000000000000))*(cj11));
IkReal x221=((IkReal(1.00000000000000))*(x218));
IkReal x222=((new_r02)*(x217));
IkReal x223=((new_r00)*(x217));
IkReal x224=((new_r01)*(x217));
evalcond[0]=((((new_r12)*(x217)))+(((new_r02)*(x218))));
evalcond[1]=((((new_r11)*(x217)))+(((new_r01)*(x218)))+(sj11));
evalcond[2]=((((new_r12)*(x218)))+(((IkReal(-1.00000000000000))*(x222)))+(sj10));
evalcond[3]=((((IkReal(-1.00000000000000))*(x220)))+(((new_r10)*(x217)))+(((new_r00)*(x218))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x223)))+(((IkReal(-1.00000000000000))*(cj10)*(sj11)))+(((new_r10)*(x218))));
evalcond[5]=((((new_r11)*(x218)))+(((IkReal(-1.00000000000000))*(x224)))+(((IkReal(-1.00000000000000))*(cj10)*(x220))));
evalcond[6]=((((sj10)*(x223)))+(((cj10)*(new_r20)))+(((IkReal(-1.00000000000000))*(new_r10)*(x218)*(x219))));
evalcond[7]=((((cj10)*(new_r21)))+(((sj10)*(x224)))+(((IkReal(-1.00000000000000))*(new_r11)*(x218)*(x219))));
evalcond[8]=((IkReal(-1.00000000000000))+(((cj10)*(new_r22)))+(((IkReal(-1.00000000000000))*(new_r12)*(x218)*(x219)))+(((sj10)*(x222))));
evalcond[9]=((((cj10)*(x222)))+(((IkReal(-1.00000000000000))*(new_r22)*(x219)))+(((IkReal(-1.00000000000000))*(cj10)*(new_r12)*(x221))));
evalcond[10]=((((cj10)*(x223)))+(((IkReal(-1.00000000000000))*(cj10)*(new_r10)*(x221)))+(sj11)+(((IkReal(-1.00000000000000))*(new_r20)*(x219))));
evalcond[11]=((((IkReal(-1.00000000000000))*(cj10)*(new_r11)*(x221)))+(cj11)+(((cj10)*(x224)))+(((IkReal(-1.00000000000000))*(new_r21)*(x219))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x225=((gconst7)*(sj10));
if( IKabs(((new_r02)*(x225))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r12)*(x225))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j9array[0]=IKatan2(((new_r02)*(x225)), ((IkReal(-1.00000000000000))*(new_r12)*(x225)));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[12];
IkReal x226=IKsin(j9);
IkReal x227=IKcos(j9);
IkReal x228=((IkReal(1.00000000000000))*(sj10));
IkReal x229=((IkReal(1.00000000000000))*(cj11));
IkReal x230=((IkReal(1.00000000000000))*(x227));
IkReal x231=((new_r02)*(x226));
IkReal x232=((new_r00)*(x226));
IkReal x233=((new_r01)*(x226));
evalcond[0]=((((new_r12)*(x226)))+(((new_r02)*(x227))));
evalcond[1]=((((new_r01)*(x227)))+(sj11)+(((new_r11)*(x226))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x231)))+(((new_r12)*(x227)))+(sj10));
evalcond[3]=((((new_r00)*(x227)))+(((IkReal(-1.00000000000000))*(x229)))+(((new_r10)*(x226))));
evalcond[4]=((((new_r10)*(x227)))+(((IkReal(-1.00000000000000))*(x232)))+(((IkReal(-1.00000000000000))*(cj10)*(sj11))));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj10)*(x229)))+(((IkReal(-1.00000000000000))*(x233)))+(((new_r11)*(x227))));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r10)*(x227)*(x228)))+(((sj10)*(x232)))+(((cj10)*(new_r20))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r11)*(x227)*(x228)))+(((cj10)*(new_r21)))+(((sj10)*(x233))));
evalcond[8]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r12)*(x227)*(x228)))+(((cj10)*(new_r22)))+(((sj10)*(x231))));
evalcond[9]=((((IkReal(-1.00000000000000))*(cj10)*(new_r12)*(x230)))+(((IkReal(-1.00000000000000))*(new_r22)*(x228)))+(((cj10)*(x231))));
evalcond[10]=((((IkReal(-1.00000000000000))*(cj10)*(new_r10)*(x230)))+(sj11)+(((cj10)*(x232)))+(((IkReal(-1.00000000000000))*(new_r20)*(x228))));
evalcond[11]=((((cj10)*(x233)))+(((IkReal(-1.00000000000000))*(new_r21)*(x228)))+(cj11)+(((IkReal(-1.00000000000000))*(cj10)*(new_r11)*(x230))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:genericrobot - abby (2062b6ec46d77cbb0efbc060880affd0)>"; }

IKFAST_API const char* GetIkFastVersion() { return IKFAST_STRINGIZE(IKFAST_VERSION); }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
